@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>

            }
        </tbody>
    </table>
    <p role="status">Number of warm days: @warmDays</p>
    <button @onclick="FilterForecasts">Forecasts filter</button>
    <button @onclick="RestoreOriginalForecasts">Restore original forecasts</button>
    <input class="form-control" @oninput="Input" placeholder="Filtruj po nazwie" />

}

@code {
    private int warmDays = 0;
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? originalForecasts;


    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index =>
        {
            int temperatureC = Random.Shared.Next(-20, 55);
            if(temperatureC > 15)
            {
                warmDays++;
            }
            return new WeatherForecast
            {

                Date = startDate.AddDays(index),
                TemperatureC = temperatureC,
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            };
        }).ToArray();
        originalForecasts = forecasts.ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    void FilterForecasts()
    {
        if(forecasts != null)
        {
            forecasts = forecasts.Where(f => f.TemperatureC < 15).ToArray();
        }
    }
    private void RestoreOriginalForecasts()
    {
        if (forecasts != null)
        {
            forecasts = originalForecasts.ToArray();
        }
    }

    private void Input(ChangeEventArgs arg)
    {
        string searchText = arg.Value?.ToString() ?? string.Empty;
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            forecasts = originalForecasts?.Where(f => f.Summary?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false).ToArray();
        }
        else
        {
            forecasts = originalForecasts?.ToArray();
        }
    }
}
